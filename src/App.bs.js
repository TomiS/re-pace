// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

var ppx_printed_query = "query getAllStops  {\nstops  {\ngtfsId  \nname  \nlat  \nlon  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["stops"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(match$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Js_primitive.valFromOption(match$1);
                      var match$2 = value$1["gtfsId"];
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var match$3 = Js_json.decodeString(match$2);
                        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                      } else {
                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field gtfsId on type Stop is missing");
                      }
                      var match$4 = value$1["name"];
                      var tmp$2;
                      if (match$4 !== undefined) {
                        var match$5 = Js_json.decodeString(match$4);
                        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
                      } else {
                        tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Stop is missing");
                      }
                      var match$6 = value$1["lat"];
                      var tmp$3;
                      if (match$6 !== undefined) {
                        var match$7 = Js_json.decodeNull(match$6);
                        if (match$7 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$8 = Js_json.decodeNumber(match$6);
                          tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(match$6));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      var match$9 = value$1["lon"];
                      var tmp$4;
                      if (match$9 !== undefined) {
                        var match$10 = Js_json.decodeNull(match$9);
                        if (match$10 !== undefined) {
                          tmp$4 = undefined;
                        } else {
                          var match$11 = Js_json.decodeNumber(match$9);
                          tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(match$9));
                        }
                      } else {
                        tmp$4 = undefined;
                      }
                      tmp = {
                        gtfsId: tmp$1,
                        name: tmp$2,
                        lat: tmp$3,
                        lon: tmp$4
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Js_primitive.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            stops: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetStops = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetStopsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.reducerComponent("Example");

function make$1() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var getStopsQuery = make(/* () */0);
              var match = self[/* state */1][/* show */1];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Curry.app(GetStopsQuery[/* make */3], [
                                  Js_primitive.some(getStopsQuery.variables),
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  (function (param) {
                                      var result = param[/* result */0];
                                      if (typeof result === "number") {
                                        return React.createElement("div", undefined, "Loading");
                                      } else if (result.tag) {
                                        console.log(result[0].stops);
                                        return React.createElement("ul", {
                                                    className: "list"
                                                  });
                                      } else {
                                        return React.createElement("div", undefined, result[0].message);
                                      }
                                    })
                                ])), React.createElement("input", {
                              value: self[/* state */1][/* greeting */2],
                              onChange: (function ($$event) {
                                  return Curry._1(self[/* send */3], /* InputChange */[$$event.target.value]);
                                })
                            }), React.createElement("button", {
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* Toggle */1);
                                })
                            }, "Toggle greeting"), match ? self[/* state */1][/* greeting */2] : null);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* count */4,
                      /* show */true,
                      /* greeting */""
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0],
                              /* show */!state[/* show */1],
                              /* greeting */state[/* greeting */2]
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0] + 1 | 0,
                              /* show */state[/* show */1],
                              /* greeting */state[/* greeting */2]
                            ]]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* show */state[/* show */1],
                            /* greeting */action[0]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.GetStops = GetStops;
exports.GetStopsQuery = GetStopsQuery;
exports.component = component;
exports.make = make$1;
/* GetStopsQuery Not a pure module */
